#!/bin/bash

#   ipa-common  -  Shared resources for ipa shell scripts.
#
#   E.B. Smith  March 2014

#      Uses: ipaLogFileName, ipaDebugSet
#   Creates: ipaTempPath, ipaModuleName, ipaModulePath, ipaPassword,
#            ipaCodeSignIdentity, ipaStagingPath, ipaToolsVersion

ipaModuleName="$(basename "${BASH_SOURCE[1]}")"
ipaModulePath="$( cd "$(dirname "${BASH_SOURCE[1]}")" && pwd)"

# export ipaDebugSet=true
export ipaDebugSet=${ipaDebugSet:=false}
export ipaToolsVersion=1.6
export PListBuddy=/usr/libexec/PlistBuddy
export ipaTerminalOutput=${ipaTerminalOutput:=false}


if ${ipaUseLogFile-true}; then
    export ipaLogFileName=Build/deploy-log.log
fi

if [ ! -z "${ipaLogFileName:-}" ]; then
    if [ ! -f "${ipaLogFileName}" ]; then
        (mkdir -p $(dirname "${ipaLogFileName}") || true)
        touch "${ipaLogFileName}"
    fi
fi

function writeMessage() {
    if [ -z "${ipaLogFileName:-}" ] || [ -t 1 ] || $ipaTerminalOutput; then
        echo "`date` ${ipaModuleName} $@" 1>&2
    fi
    if [ ! -z "${ipaLogFileName:-}" ]; then
        echo "`date` ${ipaModuleName} $@" >> "${ipaLogFileName}"
    fi
}

function log() {
    writeMessage "    Log: $@"
}

function error() {
    writeMessage "  Error: $@"
}

function warning() {
    writeMessage "Warning: $@"
}

function debug() {
    if $ipaDebugSet; then
        writeMessage "  Debug: $@"
    fi
}

if [ ! -z "{ipaTempPath:-}" ]; then
    export ipaTempPath=$(mktemp -d -t ipa-XXXXXXXXXXX)
    debug "Temp directory is $ipaTempPath."
    (rm -Rf "${ipaTempPath}" || true)
    mkdir -p "${ipaTempPath}"
fi

function valueOfInfoPListKey () {
    #   Parameter $1: The plist file to examine.
    #   Parameter $2: The key in the plist to retrieve.

    if [ ! -f "${1}" ]; then
        error "The plist file '$1' doesn't exist."
        exit 1
    fi
    local result=`"${PListBuddy}" -c "print :${2}" "${1}"`
    if (( ${#result} == 0 )); then
        error "The key '$2' was not found or empty.  This key is required in $1."
        exit 1
    fi
    echo ${result}
}

function cleanupOnExit() {
    local status=$?
    debug "Cleaning up..."
    if $ipaDebugSet; then
        debug "Saving temp directory ${ipaTempPath}."
    else
        rm -Rf "${ipaTempPath}"
        fi
    exit $status
}

trap "cleanupOnExit" EXIT

function logOnError() {
    local status=$1
    local parentLine=$2
    local command="${3:-$4}"
    error "Exit status ${status} at line ${parentLine}.  Command: ${command}."
    exit $status
}

trap 'logOnError $? $LINENO "$(eval echo ${BASH_COMMAND})" "$BASH_COMMAND"' ERR

log "Start ${ipaModuleName} $@"
if $ipaDebugSet; then
    if [ -z "${ipaLogFileName:-}" ]; then
        debug "Log file not set. Logging to stderr."
    else
        debug "Log file is ${ipaLogFileName}."
    fi
fi
